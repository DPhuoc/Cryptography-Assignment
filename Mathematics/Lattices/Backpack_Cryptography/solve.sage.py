

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_13 = Integer(13); _sage_const_1 = Integer(1); _sage_const_16 = Integer(16); _sage_const_0 = Integer(0); _sage_const_2 = Integer(2); _sage_const_273 = Integer(273)
fi=open("output.txt",'r')
public=fi.readline().strip()
public=public[_sage_const_13 :-_sage_const_1 ].split(', ')
ls=list(public)
ls=[int(i) for i in ls]
print(len(ls))
enc=int(fi.readline().strip()[_sage_const_16 :])
print(enc)

def gen_matrix(arr):
	n=len(arr)
	#make n+1 * n+1 matrix
	cnt=_sage_const_0 
	v=[]
	while cnt < n:
		v.append(vector([_sage_const_0 ]*cnt+[_sage_const_2 ]+[_sage_const_0 ]*(n-cnt-_sage_const_1 )+[arr[cnt]]))
		#print(v[cnt],v[cnt].parent())
		cnt+=_sage_const_1 
	v.append(vector([_sage_const_1 ]*n+[enc]))
	A=matrix([i for i in v])
	return A	
	
A = gen_matrix(ls)

B=A.LLL()

v=B[_sage_const_273 -_sage_const_16 ]

print(v)

x=A.solve_left(v)

#print(x)


v_=[]
for i in v[:-_sage_const_1 ]:
	v_.append(str(_sage_const_0  if i^_sage_const_1  == _sage_const_0  else _sage_const_1  ))

print(v_)
v_="".join(v_)[::-_sage_const_1 ]
v_=int(v_,_sage_const_2 )
print(v_)

from Crypto.Util.number import long_to_bytes
	
print(long_to_bytes(v_))






